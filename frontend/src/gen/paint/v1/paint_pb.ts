// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file paint/v1/paint.proto (package paint.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum paint.v1.Color
 */
export enum Color {
  /**
   * @generated from enum value: COLOR_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: COLOR_BLUE = 1;
   */
  BLUE = 1,

  /**
   * @generated from enum value: COLOR_RED = 2;
   */
  RED = 2,

  /**
   * @generated from enum value: COLOR_GREEN = 3;
   */
  GREEN = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Color)
proto3.util.setEnumType(Color, "paint.v1.Color", [
  { no: 0, name: "COLOR_UNSPECIFIED" },
  { no: 1, name: "COLOR_BLUE" },
  { no: 2, name: "COLOR_RED" },
  { no: 3, name: "COLOR_GREEN" },
]);

/**
 * @generated from message paint.v1.GetColorRequest
 */
export class GetColorRequest extends Message<GetColorRequest> {
  constructor(data?: PartialMessage<GetColorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "paint.v1.GetColorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetColorRequest {
    return new GetColorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetColorRequest {
    return new GetColorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetColorRequest {
    return new GetColorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetColorRequest | PlainMessage<GetColorRequest> | undefined, b: GetColorRequest | PlainMessage<GetColorRequest> | undefined): boolean {
    return proto3.util.equals(GetColorRequest, a, b);
  }
}

/**
 * @generated from message paint.v1.GetColorResponse
 */
export class GetColorResponse extends Message<GetColorResponse> {
  /**
   * @generated from field: paint.v1.Color color = 1;
   */
  color = Color.UNSPECIFIED;

  constructor(data?: PartialMessage<GetColorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "paint.v1.GetColorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "color", kind: "enum", T: proto3.getEnumType(Color) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetColorResponse {
    return new GetColorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetColorResponse {
    return new GetColorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetColorResponse {
    return new GetColorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetColorResponse | PlainMessage<GetColorResponse> | undefined, b: GetColorResponse | PlainMessage<GetColorResponse> | undefined): boolean {
    return proto3.util.equals(GetColorResponse, a, b);
  }
}

/**
 * @generated from message paint.v1.GetColorStreamRequest
 */
export class GetColorStreamRequest extends Message<GetColorStreamRequest> {
  constructor(data?: PartialMessage<GetColorStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "paint.v1.GetColorStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetColorStreamRequest {
    return new GetColorStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetColorStreamRequest {
    return new GetColorStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetColorStreamRequest {
    return new GetColorStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetColorStreamRequest | PlainMessage<GetColorStreamRequest> | undefined, b: GetColorStreamRequest | PlainMessage<GetColorStreamRequest> | undefined): boolean {
    return proto3.util.equals(GetColorStreamRequest, a, b);
  }
}

/**
 * @generated from message paint.v1.GetColorStreamResponse
 */
export class GetColorStreamResponse extends Message<GetColorStreamResponse> {
  /**
   * @generated from field: paint.v1.Color color = 1;
   */
  color = Color.UNSPECIFIED;

  constructor(data?: PartialMessage<GetColorStreamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "paint.v1.GetColorStreamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "color", kind: "enum", T: proto3.getEnumType(Color) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetColorStreamResponse {
    return new GetColorStreamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetColorStreamResponse {
    return new GetColorStreamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetColorStreamResponse {
    return new GetColorStreamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetColorStreamResponse | PlainMessage<GetColorStreamResponse> | undefined, b: GetColorStreamResponse | PlainMessage<GetColorStreamResponse> | undefined): boolean {
    return proto3.util.equals(GetColorStreamResponse, a, b);
  }
}

/**
 * @generated from message paint.v1.ChangeColorRequest
 */
export class ChangeColorRequest extends Message<ChangeColorRequest> {
  /**
   * @generated from field: paint.v1.Color color = 1;
   */
  color = Color.UNSPECIFIED;

  constructor(data?: PartialMessage<ChangeColorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "paint.v1.ChangeColorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "color", kind: "enum", T: proto3.getEnumType(Color) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeColorRequest {
    return new ChangeColorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeColorRequest {
    return new ChangeColorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeColorRequest {
    return new ChangeColorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeColorRequest | PlainMessage<ChangeColorRequest> | undefined, b: ChangeColorRequest | PlainMessage<ChangeColorRequest> | undefined): boolean {
    return proto3.util.equals(ChangeColorRequest, a, b);
  }
}

/**
 * @generated from message paint.v1.ChangeColorResponse
 */
export class ChangeColorResponse extends Message<ChangeColorResponse> {
  /**
   * @generated from field: bool succeed = 1;
   */
  succeed = false;

  constructor(data?: PartialMessage<ChangeColorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "paint.v1.ChangeColorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "succeed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChangeColorResponse {
    return new ChangeColorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChangeColorResponse {
    return new ChangeColorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChangeColorResponse {
    return new ChangeColorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ChangeColorResponse | PlainMessage<ChangeColorResponse> | undefined, b: ChangeColorResponse | PlainMessage<ChangeColorResponse> | undefined): boolean {
    return proto3.util.equals(ChangeColorResponse, a, b);
  }
}

