// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/paint/v1/paint.proto

package paintv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "rpc-server/gen/proto/paint/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PaintServiceName is the fully-qualified name of the PaintService service.
	PaintServiceName = "paint.v1.PaintService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaintServiceChangeColorProcedure is the fully-qualified name of the PaintService's ChangeColor
	// RPC.
	PaintServiceChangeColorProcedure = "/paint.v1.PaintService/ChangeColor"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	paintServiceServiceDescriptor           = v1.File_proto_paint_v1_paint_proto.Services().ByName("PaintService")
	paintServiceChangeColorMethodDescriptor = paintServiceServiceDescriptor.Methods().ByName("ChangeColor")
)

// PaintServiceClient is a client for the paint.v1.PaintService service.
type PaintServiceClient interface {
	ChangeColor(context.Context, *connect.Request[v1.ChangeColorRequest]) (*connect.Response[v1.ChangeColorResponse], error)
}

// NewPaintServiceClient constructs a client for the paint.v1.PaintService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaintServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaintServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &paintServiceClient{
		changeColor: connect.NewClient[v1.ChangeColorRequest, v1.ChangeColorResponse](
			httpClient,
			baseURL+PaintServiceChangeColorProcedure,
			connect.WithSchema(paintServiceChangeColorMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// paintServiceClient implements PaintServiceClient.
type paintServiceClient struct {
	changeColor *connect.Client[v1.ChangeColorRequest, v1.ChangeColorResponse]
}

// ChangeColor calls paint.v1.PaintService.ChangeColor.
func (c *paintServiceClient) ChangeColor(ctx context.Context, req *connect.Request[v1.ChangeColorRequest]) (*connect.Response[v1.ChangeColorResponse], error) {
	return c.changeColor.CallUnary(ctx, req)
}

// PaintServiceHandler is an implementation of the paint.v1.PaintService service.
type PaintServiceHandler interface {
	ChangeColor(context.Context, *connect.Request[v1.ChangeColorRequest]) (*connect.Response[v1.ChangeColorResponse], error)
}

// NewPaintServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaintServiceHandler(svc PaintServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paintServiceChangeColorHandler := connect.NewUnaryHandler(
		PaintServiceChangeColorProcedure,
		svc.ChangeColor,
		connect.WithSchema(paintServiceChangeColorMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/paint.v1.PaintService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaintServiceChangeColorProcedure:
			paintServiceChangeColorHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaintServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaintServiceHandler struct{}

func (UnimplementedPaintServiceHandler) ChangeColor(context.Context, *connect.Request[v1.ChangeColorRequest]) (*connect.Response[v1.ChangeColorResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("paint.v1.PaintService.ChangeColor is not implemented"))
}
