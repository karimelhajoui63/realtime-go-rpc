// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/docker-existing-docker-compose
{
	"name": "Realtime Go/RPC",

	// Update the 'dockerComposeFile' list if you have more compose files or use different names.
	// The .devcontainer/docker-compose.yml file contains any overrides you need/want to make.
    "dockerComposeFile": "docker-compose.yml",

	// The 'service' property is the name of the service for the container that VS Code should
	// use. Update this value and .devcontainer/docker-compose.yml to the real service name.
    "service": "devcontainer",

	// The optional 'workspaceFolder' property is the path VS Code should open by default when
	// connected. This is typically a file mount in .devcontainer/docker-compose.yml
    "workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",

	// Features to add to the dev container. More info: https://containers.dev/features.
	"features": {
		"ghcr.io/devcontainers-contrib/features/go-task:1": {},
		"ghcr.io/devcontainers/features/node:1": {},
		"ghcr.io/marcozac/devcontainer-features/buf:1": {}
	},

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [9000],

	// Uncomment the next line if you want start specific services in your Docker Compose config.
	// "runServices": [],

	// Uncomment the next line if you want to keep your containers running after VS Code shuts down.
	// "shutdownAction": "none",

    // Why Dockerfile + postCreateCommand?
    // Note from here: https://code.visualstudio.com/docs/devcontainers/create-dev-container
    //   > A custom Dockerfile will benefit from Docker's build cache and result in faster rebuilds than postCreateCommand. However, the Dockerfile runs before the dev container is created and the workspace folder is mounted and therefore does not have access to the files in the workspace folder. A Dockerfile is most suitable for installing packages and tools independent of your workspace files.
    // TL;DR: Dockerfile doesn't have access to mounted files
	// The next lines run commands after the container is created.
	"postCreateCommand": {
		"go": "cd backend && go mod download",
		"npm": "cd frontend && npm install"
	},

	// Configure tool-specific properties.
	// "customizations": {},

    // For commands within the container
    // "containerUser": "root",
    // For commands like the ones in "postCreateCommand"
	"remoteUser": "root"

}